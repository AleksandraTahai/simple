1) НЕ ЗАБЫТЬ ВЕРНУТЬ ЮЗЕР_АЙДИ В МЕТОДАХ
2) ПРОВЕРИТЬ ФОРМАТ ДАТ ВЕЗДЕ --- ПРИВЕСТИ К ОДНОМУ ФОРМАТУ
3) HabitCreateRequest ТРУ - ---- dd($request->all());
4) 














































.....СЕРВИС
public function update(int $id, array $data): bool
    {
        $habit = $this->builder()->find($id);

        $habit->update([
            'title' => $data['title'],
            'description' => $data['description'] ?? null,
            'reminder_time' => $data['reminder_time'] ?? null,
        ]);

        $habit->days()->sync($data['day_ids'] ?? []);
        $this->generateLogs($habit);

        return $habit;
    }


public function delete(int $habitId, int $userId): bool
{
    $query = $this->builder()
        ->where('id', $habitId)
        ->where('user_id', $userId);

    return (bool) $query->delete();
}

...БД - хебит дей
Schema::create('habit_day', function (Blueprint $table) {
    $table->foreignId('habit_id')->constrained()->onDelete('cascade'); ///каскадное удаление работает только с внешними ключами
    $table->foreignId('day_id')->constrained('days')->onDelete('cascade');
    $table->primary(['habit_id', 'day_id']);
});

.....БД-логи
    public function up(): void
    {
        Schema::create('habit_logs', function (Blueprint $table) {
            $table->id();
            $table->foreignId('habit_id')->constrained('habits')->onDelete('cascade');
            $table->foreignId('day_id')->constrained('day_of_weeks');
            $table->date('date');
            $table->integer('is_done')->default(0);
            $table->timestamp('create_time')->nullable();
            $table->timestamp('update_time')->nullable();
        });
    }


    public function generateLogs(Habit $habit): void
    {
        $start = now();
        $end = now()->addWeek();
        $dayIds = $habit->days->pluck('id')->toArray();

        $current = $start->copy();
        while ($current <= $end) {
            if (in_array($current->dayOfWeek, $dayIds)) {
                HabitLog::firstOrCreate([
                    'habit_id' => $habit->id,
                    'date' => $current, /// карбон а не строка
                ], [
                    'day_id' => $current->dayOfWeek,
                    'is_done' => 0,
                ]);
            }
            $current->addDay();
        }
    }

    public function updateMissedLogs(): void
    {   $habit = $this->builder();
        $habit->where('date', '<', now()) /// карбон а не строка
            ->where('is_done', 0)
            ->update(['is_done' => 2]);
    }


...удалить контроллер для логов




...контроллер для хобби

class TaskResourceController extends Controller
{
    protected TaskServiceInterface $taskService;

    public function __construct(TaskService $taskService)
    {
        $this->taskService = $taskService;
    }

    public function index()
    {
        $data = $this->taskService->getAll();

        return view('tasks.list', compact('data'));
    }

    public function show(int $id)
    {
        $data = $this->taskService->getById($id);

        return view('tasks.detail', ['model' => $data]);
    }

    public function create()
    {
        return view('tasks.create');
    }

    public function store(CreateTaskRequest $request)
    {
        $data = $request->validated();
        $task = $this->taskService->create($data);

        return redirect('/tasks/' . $task->id);
    }

    public function edit(int $id)
    {
        $task = $this->taskService->getById($id);

        return view('tasks.edit', ['model' => $task]);
    }

    public function update(CreateTaskRequest $request, int $id)
    {
        $data = $request->validated();
        $task = $this->taskService->update($id, $data);

        return redirect('/tasks/' . $task->id);
    }

    public function destroy(int $id)
    {
        $this->taskService->delete($id);
        return redirect('/tasks');
    }
}


